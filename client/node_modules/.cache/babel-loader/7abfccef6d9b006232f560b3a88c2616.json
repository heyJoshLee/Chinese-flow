{"ast":null,"code":"import * as api from '../api';\nimport { GET_RESOURCES, GET_RESOURCE, CREATE_RESOURCE, DELETE_RESOURCE, UPDATE_RESOURCE } from '../types/index';\nexport const createResource = resourceParams => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createResource(resourceParams);\n    dispatch({\n      type: CREATE_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getResource = resourceId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getResource(resourceId);\n    console.log(data);\n    dispatch({\n      type: GET_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/actions/resources.js"],"names":["api","GET_RESOURCES","GET_RESOURCE","CREATE_RESOURCE","DELETE_RESOURCE","UPDATE_RESOURCE","createResource","resourceParams","dispatch","data","type","payload","error","console","log","getResource","resourceId"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,aAAT,EACEC,YADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,eAJF,QAIwB,gBAJxB;AAME,OAAO,MAAMC,cAAc,GAAIC,cAAD,IAAoB,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACM,cAAJ,CAAmBC,cAAnB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,eADC;AAEPQ,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,WAAW,GAAIC,UAAD,IAAgB,MAAOR,QAAP,IAAoB;AAC7D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACe,WAAJ,CAAgBC,UAAhB,CAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,YADC;AAEPS,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXM","sourcesContent":["import * as api from '../api';\nimport { GET_RESOURCES, \n  GET_RESOURCE, \n  CREATE_RESOURCE, \n  DELETE_RESOURCE, \n  UPDATE_RESOURCE} from '../types/index';\n\n  export const createResource = (resourceParams) => async (dispatch) => {\n    try {\n      const { data } = await api.createResource(resourceParams);\n      dispatch({\n        type: CREATE_RESOURCE,\n        payload: data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  export const getResource = (resourceId) => async (dispatch) => {\n    try {\n      const { data } = await api.getResource(resourceId);\n      console.log(data) \n      dispatch({\n        type: GET_RESOURCE,\n        payload: data\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }"]},"metadata":{},"sourceType":"module"}