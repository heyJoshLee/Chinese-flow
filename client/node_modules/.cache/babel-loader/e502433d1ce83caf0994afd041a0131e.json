{"ast":null,"code":"import * as api from '../api';\nimport { GET_WORDS, GET_WORD, CREATE_WORD, DELETE_WORD, UPDATE_WORD } from '../types/index';\nexport const createWord = wordParams => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createWord(wordParams);\n    dispatch({\n      type: CREATE_WORD,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getWord = wordId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getWord(wordId);\n    dispatch({\n      type: GET_WORD,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getWords = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getWords();\n    dispatch({\n      type: GET_WORD,\n      payload: data\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateWord = (wordId, wordParams) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updateWord(wordId, wordParams);\n    dispatch({\n      type: UPDATE_WORD,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteWord = wordId => async dispatch => {\n  const {\n    data\n  } = await api.deleteWord(wordId);\n  dispatch({\n    type: DELETE_WORD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/actions/words.js"],"names":["api","GET_WORDS","GET_WORD","CREATE_WORD","DELETE_WORD","UPDATE_WORD","createWord","wordParams","dispatch","data","type","payload","error","console","log","getWord","wordId","getWords","updateWord","deleteWord"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,SAAT,EACEC,QADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,QAIoB,gBAJpB;AAMA,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAAgB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACM,UAAJ,CAAeC,UAAf,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,WADC;AAEPQ,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,OAAO,GAAIC,MAAD,IAAY,MAAOR,QAAP,IAAoB;AACrD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACe,OAAJ,CAAYC,MAAZ,CAAvB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,QADC;AAEPS,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMK,QAAQ,GAAG,MAAM,MAAOT,QAAP,IAAoB;AAChD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACiB,QAAJ,EAAvB;AACAT,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,QADC;AAEPS,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXM;AAcP,OAAO,MAAMM,UAAU,GAAG,CAACF,MAAD,EAAST,UAAT,KAAwB,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACkB,UAAJ,CAAeF,MAAf,EAAuBT,UAAvB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEL,WADC;AAEPM,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMO,UAAU,GAAIH,MAAD,IAAY,MAAOR,QAAP,IAAoB;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMT,GAAG,CAACmB,UAAJ,CAAeH,MAAf,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEN,WADC;AAEPO,IAAAA,OAAO,EAAEF;AAFF,GAAD,CAAR;AAID,CANM","sourcesContent":["import * as api from '../api';\nimport { GET_WORDS, \n  GET_WORD, \n  CREATE_WORD, \n  DELETE_WORD, \n  UPDATE_WORD} from '../types/index';\n\nexport const createWord = (wordParams) => async (dispatch) => {\n  try {\n    const { data } = await api.createWord(wordParams);\n    dispatch({\n      type: CREATE_WORD,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getWord = (wordId) => async (dispatch) => {\n  try {\n    const { data } = await api.getWord(wordId);\n    dispatch({\n      type: GET_WORD,\n      payload: data\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getWords = () => async (dispatch) => {\n  try {\n    const { data } = await api.getWords();\n    dispatch({\n      type: GET_WORD,\n      payload: data\n    })\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\nexport const updateWord = (wordId, wordParams) => async (dispatch) => {\n  try {\n    const { data } = await api.updateWord(wordId, wordParams); \n    dispatch({\n      type: UPDATE_WORD,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const deleteWord = (wordId) => async (dispatch) => {\n  const { data } = await api.deleteWord(wordId);\n  dispatch({\n    type: DELETE_WORD,\n    payload: data\n  });\n}"]},"metadata":{},"sourceType":"module"}