{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/repos/chinese-app/client/src/components/resources/ProgressBar.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProgressBar = ({\n  resource,\n  knownWords\n}) => {\n  const percentKnown = (resource, knownWords) => {\n    let wordsKnown = 0;\n    resource.words.forEach(word => {\n      knownWords.forEach(knownWord => {\n        let knowWord = knownWord._id === word.characterId;\n\n        if (knowWord) {\n          wordsKnown += 1;\n        }\n      });\n    });\n    return Math.floor(wordsKnown / resource.words.length * 100);\n  };\n\n  const renderPercentageBar = percent => {\n    let barColor;\n\n    if (percent >= 80) {\n      barColor = 'success';\n    } else if (percent >= 60) {\n      barColor = 'warning';\n    } else {\n      barColor = 'danger';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3 progress\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `progress-bar bg-${barColor}`,\n        role: \"progressbar\",\n        style: {\n          width: `${percent}%`\n        },\n        \"aria-valuenow\": 25,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        children: `${percent}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (!resource || !knownWords) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 43\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderPercentageBar(percentKnown())\n  }, void 0, false);\n};\n\n_c = ProgressBar;\nexport default ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/components/resources/ProgressBar.js"],"names":["React","ProgressBar","resource","knownWords","percentKnown","wordsKnown","words","forEach","word","knownWord","knowWord","_id","characterId","Math","floor","length","renderPercentageBar","percent","barColor","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6B;AAE/C,QAAMC,YAAY,GAAG,CAACF,QAAD,EAAWC,UAAX,KAA0B;AAC7C,QAAIE,UAAU,GAAG,CAAjB;AACAH,IAAAA,QAAQ,CAACI,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BL,MAAAA,UAAU,CAACI,OAAX,CAAmBE,SAAS,IAAI;AAC9B,YAAIC,QAAQ,GAAGD,SAAS,CAACE,GAAV,KAAkBH,IAAI,CAACI,WAAtC;;AACA,YAAIF,QAAJ,EAAc;AACZL,UAAAA,UAAU,IAAI,CAAd;AACD;AACF,OALD;AAMD,KAPD;AAQA,WAAOQ,IAAI,CAACC,KAAL,CAAWT,UAAU,GAAGH,QAAQ,CAACI,KAAT,CAAeS,MAA5B,GAAqC,GAAhD,CAAP;AACD,GAXD;;AAaA,QAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACvC,QAAIC,QAAJ;;AACA,QAAID,OAAO,IAAI,EAAf,EAAmB;AACjBC,MAAAA,QAAQ,GAAG,SAAX;AACD,KAFD,MAEO,IAAID,OAAO,IAAI,EAAf,EAAmB;AACxBC,MAAAA,QAAQ,GAAG,SAAX;AACD,KAFM,MAEA;AACLA,MAAAA,QAAQ,GAAG,QAAX;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAG,mBAAkBA,QAAS,EAA5C;AAA+C,QAAA,IAAI,EAAC,aAApD;AAAkE,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAG,GAAEF,OAAQ;AAAnB,SAAzE;AAAiG,yBAAe,EAAhH;AAAoH,yBAAe,CAAnI;AAAsI,yBAAe,GAArJ;AAAA,kBAA4J,GAAEA,OAAQ;AAAtK;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADF;AAKC,GAdH;;AAgBA,MAAI,CAACf,QAAD,IAAa,CAAEC,UAAnB,EAA+B;AAAE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAA6B;;AAE9D,sBACE;AAAA,cACGa,mBAAmB,CAACZ,YAAY,EAAb;AADtB,mBADF;AAKD,CAtCD;;KAAMH,W;AAwCN,eAAeA,WAAf","sourcesContent":["import React from 'react'; \n\nconst ProgressBar = ({ resource, knownWords}) => {\n\n  const percentKnown = (resource, knownWords) => {\n    let wordsKnown = 0\n    resource.words.forEach(word => {\n      knownWords.forEach(knownWord => {\n        let knowWord = knownWord._id === word.characterId;\n        if (knowWord) {\n          wordsKnown += 1;\n        }\n      })\n    });\n    return Math.floor(wordsKnown / resource.words.length * 100);\n  }\n\n  const renderPercentageBar = (percent) => {\n    let barColor;\n    if (percent >= 80) {\n      barColor = 'success';\n    } else if (percent >= 60) {\n      barColor = 'warning';\n    } else {\n      barColor = 'danger';\n    }\n    return(\n      <div className=\"mt-3 progress\">\n       <div className={`progress-bar bg-${barColor}`} role=\"progressbar\" style={{width: `${percent}%`}} aria-valuenow={25} aria-valuemin={0} aria-valuemax={100}>{`${percent}%`}</div>\n      </div>\n     ) \n    }\n\n  if (!resource || ! knownWords) { return <div>Loading...</div>}\n\n  return (\n    <>\n      {renderPercentageBar(percentKnown())}\n    </>\n  )\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}