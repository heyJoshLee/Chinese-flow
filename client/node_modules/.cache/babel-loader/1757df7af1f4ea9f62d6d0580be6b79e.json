{"ast":null,"code":"import resource from '../../../server/models/resource';\nimport * as api from '../api';\nimport { GET_RESOURCES, GET_RESOURCE, CREATE_RESOURCE, DELETE_RESOURCE, UPDATE_RESOURCE } from '../types/index';\nexport const createResource = resourceParams => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createResource(resourceParams);\n    dispatch({\n      type: CREATE_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getResource = resourceId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getResource(resourceId);\n    dispatch({\n      type: GET_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getResources = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getResources();\n    console.log(data);\n    dispatch({\n      type: GET_RESOURCES,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateResource = (resourceId, resourceParams) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updateResource(resourceId, resourceParams);\n    console.log(\"DATA\");\n    console.log(data);\n    dispatch({\n      type: UPDATE_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteResource = resourceId => async dispatch => {\n  const {\n    data\n  } = await api.deleteResource(resourceId);\n  dispatch({\n    type: DELETE_RESOURCE,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/actions/resources.js"],"names":["resource","api","GET_RESOURCES","GET_RESOURCE","CREATE_RESOURCE","DELETE_RESOURCE","UPDATE_RESOURCE","createResource","resourceParams","dispatch","data","type","payload","error","console","log","getResource","resourceId","getResources","updateResource","deleteResource"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iCAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AACA,SAASC,aAAT,EACEC,YADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,eAJF,QAIwB,gBAJxB;AAMA,OAAO,MAAMC,cAAc,GAAIC,cAAD,IAAoB,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACM,cAAJ,CAAmBC,cAAnB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,eADC;AAEPQ,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,WAAW,GAAIC,UAAD,IAAgB,MAAOR,QAAP,IAAoB;AAC7D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACe,WAAJ,CAAgBC,UAAhB,CAAvB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,YADC;AAEPS,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMK,YAAY,GAAG,MAAM,MAAOT,QAAP,IAAoB;AACpD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACiB,YAAJ,EAAvB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,aADC;AAEPU,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXM;AAaP,OAAO,MAAMM,cAAc,GAAG,CAACF,UAAD,EAAaT,cAAb,KAAgC,MAAOC,QAAP,IAAoB;AAChF,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACkB,cAAJ,CAAmBF,UAAnB,EAA+BT,cAA/B,CAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEL,eADC;AAEPM,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GARD,CAQE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAZM;AAcP,OAAO,MAAMO,cAAc,GAAIH,UAAD,IAAgB,MAAOR,QAAP,IAAoB;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMT,GAAG,CAACmB,cAAJ,CAAmBH,UAAnB,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEN,eADC;AAEPO,IAAAA,OAAO,EAAEF;AAFF,GAAD,CAAR;AAID,CANM","sourcesContent":["import resource from '../../../server/models/resource';\nimport * as api from '../api';\nimport { GET_RESOURCES, \n  GET_RESOURCE, \n  CREATE_RESOURCE, \n  DELETE_RESOURCE, \n  UPDATE_RESOURCE} from '../types/index';\n\nexport const createResource = (resourceParams) => async (dispatch) => {\n  try {\n    const { data } = await api.createResource(resourceParams);\n    dispatch({\n      type: CREATE_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getResource = (resourceId) => async (dispatch) => {\n  try {\n    const { data } = await api.getResource(resourceId);\n    dispatch({\n      type: GET_RESOURCE,\n      payload: data\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getResources = () => async (dispatch) => {\n  try {\n    const { data } = await api.getResources();\n    console.log(data);\n    dispatch({\n      type: GET_RESOURCES,\n      payload: data\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const updateResource = (resourceId, resourceParams) => async (dispatch) => {\n  try {\n    const { data } = await api.updateResource(resourceId, resourceParams); \n    console.log(\"DATA\")\n    console.log(data)\n    dispatch({\n      type: UPDATE_RESOURCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const deleteResource = (resourceId) => async (dispatch) => {\n  const { data } = await api.deleteResource(resourceId);\n  dispatch({\n    type: DELETE_RESOURCE,\n    payload: data\n  });\n}"]},"metadata":{},"sourceType":"module"}