{"ast":null,"code":"var _JSON$parse;\n\nimport axios from 'axios';\nlet token = (_JSON$parse = JSON.parse(localStorage.getItem('auth'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token;\nlet configFromLocalStorage = null;\n\nif (token) {\n  configFromLocalStorage = {\n    headers: {\n      \"x-auth-token\": token\n    }\n  };\n}\n\nconst BASEURL = 'http://localhost:5000';\nconst RESOURCES_URL = `${BASEURL}/resources`;\nconst WORDS_URL = `${BASEURL}/words`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`; // Users\n\nexport const logIn = logInParams => axios.post(logInURL, logInParams);\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config);\nexport const createUser = userParams => axios.post(usersURL, userParams); // resources \n\nexport const getResources = (userToken = token) => {\n  return axios.get(RESOURCES_URL, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createResource = (newResource, userToken = token) => {\n  return axios.post(RESOURCES_URL, newResource, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteResource = (resourceId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateResource = (resourceId, resourceParams, userToken = token) => {\n  return axios.post(`${RESOURCES_URL}/${resourceId}/edit`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/api/index.js"],"names":["axios","token","JSON","parse","localStorage","getItem","configFromLocalStorage","headers","BASEURL","RESOURCES_URL","WORDS_URL","logInURL","usersURL","logIn","logInParams","post","updateUser","userId","userParams","config","patch","createUser","getResources","userToken","get","createResource","newResource","getResource","resourceId","deleteResource","delete","updateResource","resourceParams"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAK,kBAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAH,gDAAG,YAA0CJ,KAAtD;AACA,IAAIK,sBAAsB,GAAG,IAA7B;;AACA,IAAIL,KAAJ,EAAW;AACTK,EAAAA,sBAAsB,GAAG;AACvBC,IAAAA,OAAO,EAAE;AACP,sBAAgBN;AADT;AADc,GAAzB;AAKD;;AAED,MAAMO,OAAO,GAAG,uBAAhB;AACA,MAAMC,aAAa,GAAI,GAAED,OAAQ,YAAjC;AACA,MAAME,SAAS,GAAI,GAAEF,OAAQ,QAA7B;AACA,MAAMG,QAAQ,GAAI,GAAEH,OAAQ,aAA5B;AACA,MAAMI,QAAQ,GAAI,GAAEJ,OAAQ,QAA5B,C,CAGA;;AAEA,OAAO,MAAMK,KAAK,GAAIC,WAAD,IAAiBd,KAAK,CAACe,IAAN,CAAWJ,QAAX,EAAqBG,WAArB,CAA/B;AAEP,OAAO,MAAME,UAAU,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,MAAM,GAAGb,sBAA9B,KAAyDN,KAAK,CAACoB,KAAN,CAAa,GAAER,QAAS,IAAGK,MAAO,EAAlC,EAAqCC,UAArC,EAAiDC,MAAjD,CAA5E;AAEP,OAAO,MAAME,UAAU,GAAIH,UAAD,IAAgBlB,KAAK,CAACe,IAAN,CAAWH,QAAX,EAAqBM,UAArB,CAAnC,C,CAGP;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACC,SAAS,GAAGtB,KAAb,KAAuB;AACjD,SAAOD,KAAK,CAACwB,GAAN,CAAUf,aAAV,EAAyB;AAC9BF,IAAAA,OAAO,EAAE;AACP,sBAAgBgB;AADT;AADqB,GAAzB,CAAP;AAKD,CANM;AAQP,OAAO,MAAME,cAAc,GAAG,CAACC,WAAD,EAAcH,SAAS,GAAGtB,KAA1B,KAAoC;AAChE,SAAOD,KAAK,CAACe,IAAN,CAAWN,aAAX,EAA0BiB,WAA1B,EAAuC;AAC5CnB,IAAAA,OAAO,EAAE;AACP,sBAAgBgB;AADT;AADmC,GAAvC,CAAP;AAKD,CANM;AAQP,OAAO,MAAMI,WAAW,GAAG,CAACC,UAAD,EAAaL,SAAS,GAAGtB,KAAzB,KAAmC;AAC5D,SAAOD,KAAK,CAACwB,GAAN,CAAW,GAAEf,aAAc,IAAGmB,UAAW,EAAzC,EAA4C;AACjDrB,IAAAA,OAAO,EAAE;AACP,sBAAgBgB;AADT;AADwC,GAA5C,CAAP;AAKD,CANM;AAQP,OAAO,MAAMM,cAAc,GAAG,CAACD,UAAD,EAAaL,SAAS,GAAGtB,KAAzB,KAAmC;AAC/D,SAAOD,KAAK,CAAC8B,MAAN,CAAc,GAAErB,aAAc,IAAGmB,UAAW,EAA5C,EAA+C;AACpDrB,IAAAA,OAAO,EAAE;AACP,sBAAgBgB;AADT;AAD2C,GAA/C,CAAP;AAKD,CANM;AAQP,OAAO,MAAMQ,cAAc,GAAG,CAACH,UAAD,EAAaI,cAAb,EAA6BT,SAAS,GAAGtB,KAAzC,KAAmD;AAC/E,SAAOD,KAAK,CAACe,IAAN,CAAY,GAAEN,aAAc,IAAGmB,UAAW,OAA1C,EAAkD;AACvDrB,IAAAA,OAAO,EAAE;AACP,sBAAgBgB;AADT;AAD8C,GAAlD,CAAP;AAKD,CANM","sourcesContent":["import axios from 'axios';\n\nlet token = JSON.parse(localStorage.getItem('auth'))?.token;\nlet configFromLocalStorage = null;\nif (token) {\n  configFromLocalStorage = { \n    headers: { \n      \"x-auth-token\": token\n    }\n  }\n} \n\nconst BASEURL = 'http://localhost:5000';\nconst RESOURCES_URL = `${BASEURL}/resources`;\nconst WORDS_URL = `${BASEURL}/words`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst usersURL = `${BASEURL}/users`;\n\n\n// Users\n\nexport const logIn = (logInParams) => axios.post(logInURL, logInParams);\n\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${usersURL}/${userId}`, userParams, config)\n\nexport const createUser = (userParams) => axios.post(usersURL, userParams);\n\n\n// resources \nexport const getResources = (userToken = token) => {\n  return axios.get(RESOURCES_URL, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const createResource = (newResource, userToken = token) => {\n  return axios.post(RESOURCES_URL, newResource, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const getResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const deleteResource = (resourceId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const updateResource = (resourceId, resourceParams, userToken = token) => {\n  return axios.post(`${RESOURCES_URL}/${resourceId}/edit`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}