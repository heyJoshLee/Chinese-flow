{"ast":null,"code":"var _JSON$parse;\n\nimport axios from 'axios';\nlet token = (_JSON$parse = JSON.parse(localStorage.getItem('auth'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token;\nlet configFromLocalStorage = null;\n\nif (token) {\n  configFromLocalStorage = {\n    headers: {\n      \"x-auth-token\": token\n    }\n  };\n}\n\nconst BASEURL = 'http://localhost:5000';\nconst RESOURCES_URL = `${BASEURL}/resources`;\nconst WORDS_URL = `${BASEURL}/words`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst USERSURL = `${BASEURL}/users`; // Users\n\nexport const logIn = logInParams => axios.post(logInURL, logInParams);\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${USERSURL}/${userId}`, userParams, config);\nexport const createUser = userParams => axios.post(USERSURL, userParams); //TODO GET USER ID TO PASS TO PARAMS\n\nexport const getWordsForLoggedInUser = (userToken = token) => {\n  return axios.get(`${USERSURL}/words`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n}; // resources \n\nexport const getResources = (userToken = token) => {\n  return axios.get(RESOURCES_URL, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const createResource = (newResource, userToken = token) => {\n  return axios.post(RESOURCES_URL, newResource, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteResource = (resourceId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateResource = (resourceId, resourceParams, userToken = token) => {\n  console.log(`${RESOURCES_URL}/${resourceId}`);\n  return axios.patch(`${RESOURCES_URL}/${resourceId}`, resourceParams);\n}; // Words\n\nexport const createWord = (newWord, userToken = token) => {\n  return axios.post(WORDS_URL, newWord, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getWord = (wordId, userToken = token) => {\n  return axios.get(`${WORDS_URL}/${wordId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getWords = (userToken = token) => {\n  return axios.get(`${WORDS_URL}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const deleteWord = (wordId, userToken = token) => {\n  return axios.delete(`${WORDS_URL}/${wordId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const updateWord = (wordId, wordParams, userToken = token) => {\n  return axios.patch(`${WORDS_URL}/${wordId}`, wordParams);\n};\nexport const getWordBySimplified = (character, userToken = token) => {\n  return axios.get(`${WORDS_URL}/getWordBySimplified/${character}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getWordsForResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}/words`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const addWordToResource = (resourceId, wordId, userToken = token) => {\n  return axios.post(`${RESOURCES_URL}/${resourceId}/addWord`, {\n    characterId: wordId\n  }, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const getUniqueWords = (text, userToken = token) => {\n  return axios.post(`${WORDS_URL}/getUniqueWords`, text, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};\nexport const removeWordFromResource = (resourceId, wordId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}/words/${wordId}`, {\n    headers: {\n      \"x-auth-token\": userToken\n    }\n  });\n};","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/api/index.js"],"names":["axios","token","JSON","parse","localStorage","getItem","configFromLocalStorage","headers","BASEURL","RESOURCES_URL","WORDS_URL","logInURL","USERSURL","logIn","logInParams","post","updateUser","userId","userParams","config","patch","createUser","getWordsForLoggedInUser","userToken","get","getResources","createResource","newResource","getResource","resourceId","deleteResource","delete","updateResource","resourceParams","console","log","createWord","newWord","getWord","wordId","getWords","deleteWord","updateWord","wordParams","getWordBySimplified","character","getWordsForResource","addWordToResource","characterId","getUniqueWords","text","removeWordFromResource"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nlet token = JSON.parse(localStorage.getItem('auth'))?.token;\nlet configFromLocalStorage = null;\nif (token) {\n  configFromLocalStorage = { \n    headers: { \n      \"x-auth-token\": token\n    }\n  }\n} \n\nconst BASEURL = 'http://localhost:5000';\nconst RESOURCES_URL = `${BASEURL}/resources`;\nconst WORDS_URL = `${BASEURL}/words`;\nconst logInURL = `${BASEURL}/auth/login`;\nconst USERSURL = `${BASEURL}/users`;\n\n\n// Users\n\nexport const logIn = (logInParams) => axios.post(logInURL, logInParams);\n\nexport const updateUser = (userId, userParams, config = configFromLocalStorage) => axios.patch(`${USERSURL}/${userId}`, userParams, config)\n\nexport const createUser = (userParams) => axios.post(USERSURL, userParams);\n\n\n//TODO GET USER ID TO PASS TO PARAMS\nexport const getWordsForLoggedInUser = (userToken = token) => {\n  return axios.get(`${USERSURL}/words`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n// resources \nexport const getResources = (userToken = token) => {\n  return axios.get(RESOURCES_URL, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const createResource = (newResource, userToken = token) => {\n  return axios.post(RESOURCES_URL, newResource, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const getResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const deleteResource = (resourceId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const updateResource = (resourceId, resourceParams, userToken = token) => {\n  console.log(`${RESOURCES_URL}/${resourceId}`)\n  return axios.patch(`${RESOURCES_URL}/${resourceId}`, resourceParams);\n}\n\n// Words\n\nexport const createWord = (newWord, userToken = token) => {\n  return axios.post(WORDS_URL, newWord, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\n\nexport const getWord = (wordId, userToken = token) => {\n  return axios.get(`${WORDS_URL}/${wordId}`,  {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const getWords = (userToken = token) => {\n  return axios.get(`${WORDS_URL}`,  {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const deleteWord = (wordId, userToken = token) => {\n  return axios.delete(`${WORDS_URL}/${wordId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const updateWord = (wordId, wordParams, userToken = token) => {\n  return axios.patch(`${WORDS_URL}/${wordId}`, wordParams);\n}\n\nexport const getWordBySimplified = (character, userToken = token) => {\n  return axios.get(`${WORDS_URL}/getWordBySimplified/${character}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const getWordsForResource = (resourceId, userToken = token) => {\n  return axios.get(`${RESOURCES_URL}/${resourceId}/words`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const addWordToResource = (resourceId, wordId, userToken = token) => {\n  return axios.post(`${RESOURCES_URL}/${resourceId}/addWord`, {characterId: wordId}, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const getUniqueWords = (text, userToken = token ) => {\n  return axios.post(`${WORDS_URL}/getUniqueWords`, text,  {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  });\n}\n\nexport const removeWordFromResource = (resourceId, wordId, userToken = token) => {\n  return axios.delete(`${RESOURCES_URL}/${resourceId}/words/${wordId}`, {\n    headers: { \n      \"x-auth-token\": userToken\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}