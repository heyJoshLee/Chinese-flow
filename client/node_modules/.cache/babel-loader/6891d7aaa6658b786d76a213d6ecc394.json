{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/repos/chinese-app/client/src/components/resources/WordButtonContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getWord } from '../../actions/words';\nimport AddWordToListButton from './AddWordToListButton';\nimport RemoveWordFromListButton from './RemoveWordFromListButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WordButton = ({\n  word\n}) => {\n  _s();\n\n  const knownWords = useSelector(state => state.knownWords);\n  const [fullWord, setFullWord] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(async () => {\n    setFullWord(await dispatch(getWord(word.characterId)));\n  }, []);\n\n  if (!fullWord) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  const wordIsKnown = () => {\n    return knownWords.some(knownWord => {\n      return knownWord._id === word.characterId;\n    });\n  };\n\n  if (wordIsKnown()) {\n    return /*#__PURE__*/_jsxDEV(RemoveWordFromListButton, {\n      fullWord: fullWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(AddWordToListButton, {\n      fullWord: fullWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(WordButton, \"guNqGWCp9oJbX7nQg30rK+cH1Ms=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = WordButton;\nexport default WordButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordButton\");","map":{"version":3,"sources":["/Users/mymac/repos/chinese-app/client/src/components/resources/WordButtonContainer.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getWord","AddWordToListButton","RemoveWordFromListButton","WordButton","word","knownWords","state","fullWord","setFullWord","dispatch","characterId","wordIsKnown","some","knownWord","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAuB,qBAAvB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC/B,QAAMC,UAAU,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,WAAW,CAAC,MAAMC,QAAQ,CAACT,OAAO,CAACI,IAAI,CAACM,WAAN,CAAR,CAAf,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAI,CAACH,QAAL,EAAgB;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMI,WAAW,GAAG,MAAM;AACxB,WAAON,UAAU,CAACO,IAAX,CAAgBC,SAAS,IAAI;AAClC,aAAOA,SAAS,CAACC,GAAV,KAAkBV,IAAI,CAACM,WAA9B;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,MAAIC,WAAW,EAAf,EAAmB;AACjB,wBAAO,QAAC,wBAAD;AAA0B,MAAA,QAAQ,EAAEJ;AAApC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO,QAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAGF,CA1BD;;GAAMJ,U;UACeJ,W,EAEFD,W;;;KAHbK,U;AA4BN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getWord} from '../../actions/words';\nimport AddWordToListButton from './AddWordToListButton';\nimport RemoveWordFromListButton from './RemoveWordFromListButton';\n\nconst WordButton = ({ word }) => {\n  const knownWords = useSelector(state => state.knownWords)\n  const [fullWord, setFullWord] = useState(null);\n  const dispatch = useDispatch();\n\n  useEffect(async () => {\n    setFullWord(await dispatch(getWord(word.characterId)));\n  }, [])\n\n  if (!fullWord ) {\n    return <div>.</div>\n  }\n\n  const wordIsKnown = () => {\n    return knownWords.some(knownWord => {\n      return knownWord._id === word.characterId\n    })\n  }\n  \n  if (wordIsKnown()) {\n    return <RemoveWordFromListButton fullWord={fullWord} />\n  } else {\n    return <AddWordToListButton fullWord={fullWord} />\n  }\n\n  \n}\n\nexport default WordButton;"]},"metadata":{},"sourceType":"module"}